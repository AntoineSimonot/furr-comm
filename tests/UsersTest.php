<?php

namespace App\Tests;

use ApiPlatform\Core\Bridge\Symfony\Bundle\Test\ApiTestCase;
use App\Entity\User;
use Hautelook\AliceBundle\PhpUnit\RefreshDatabaseTrait;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Contracts\HttpClient\Exception\ClientExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\DecodingExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\RedirectionExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\ServerExceptionInterface;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;

class UsersTest extends ApiTestCase
{

    private UserPasswordHasherInterface $passwordHasher;

// This trait provided by AliceBundle will take care of refreshing the database content to a known state before each test
use RefreshDatabaseTrait;

    /**
     * @throws RedirectionExceptionInterface
     * @throws DecodingExceptionInterface
     * @throws ClientExceptionInterface
     * @throws TransportExceptionInterface
     * @throws ServerExceptionInterface
     */
    public function testGetCollection(): void
{
// The client implements Symfony HttpClient's `HttpClientInterface`, and the response `ResponseInterface`
$response = static::createClient()->request('GET', '/api/users');

$this->assertResponseIsSuccessful();
// Asserts that the returned content type is JSON-LD (the default)
$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

// Asserts that the returned JSON is a superset of this one
$this->assertJsonContains([
"@context" => "/api/contexts/User",
"@id"=> "/api/users",
"@type"=> "hydra:Collection",
'hydra:totalItems' => 100,
'hydra:view' => [
'@id' => '/api/users?page=1',
'@type' => 'hydra:PartialCollectionView',
'hydra:first' => '/api/users?page=1',
'hydra:last' => '/api/users?page=4',
'hydra:next' => '/api/users?page=2',
],
]);

// Because test fixtures are automatically loaded between each test, you can assert on them
$this->assertCount(30, $response->toArray()['hydra:member']);

// Asserts that the returned JSON is validated by the JSON Schema generated for this resource by API Platform
// This generated JSON Schema is also used in the OpenAPI spec!
$this->assertMatchesResourceCollectionJsonSchema(User::class);
}

    /**
     * @throws RedirectionExceptionInterface
     * @throws DecodingExceptionInterface
     * @throws ClientExceptionInterface
     * @throws TransportExceptionInterface
     * @throws ServerExceptionInterface
     */
    public function testCreateUser(): void
{
$response = static::createClient()->request('POST', 'api/users', ['json' => [
'pseudo' => 'Gryphen',
'email' => 'simonotantoine1@gmail.com',
'password' => '0208200ASs',
]]);

$this->assertResponseStatusCodeSame(201);
$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');
$this->assertJsonContains([
    "@context" => "/api/contexts/User",
    "@id"=> "/api/users/101",
    "@type"=> "User"
]);
    $this->assertMatchesRegularExpression('~^/api/users/\d+$~', $response->toArray()['@id']);
}

    /**
     * @throws TransportExceptionInterface
     * @throws ServerExceptionInterface
     * @throws RedirectionExceptionInterface
     * @throws DecodingExceptionInterface
     * @throws ClientExceptionInterface
     */
    public function testCreateInvalidUser(): void
{
static::createClient()->request('POST', '/api/users', ['json' => [
'isbn' => 'invalid',
]]);

$this->assertResponseStatusCodeSame(422);
$this->assertResponseHeaderSame('content-type', 'application/ld+json; charset=utf-8');

$this->assertJsonContains([
'@context' => '/api/contexts/ConstraintViolationList',
'@type' => 'ConstraintViolationList',
'hydra:title' => 'An error occurred',
'hydra:description' => "password: This value should not be blank.\npseudo: This value should not be blank."
]);
}

    /**
     * @throws TransportExceptionInterface
     * @throws ServerExceptionInterface
     * @throws RedirectionExceptionInterface
     * @throws DecodingExceptionInterface
     * @throws ClientExceptionInterface
     */
    public function testUpdateUser(): void
{
$client = static::createClient();
// findIriBy allows to retrieve the IRI of an item by searching for some of its properties.
// ISBN 9786644879585 has been generated by Alice when loading test fixtures.
// Because Alice use a seeded pseudo-random number generator, we're sure that this ISBN will always be generated.

$client->request('PUT', "/api/users/99", ['json' => [
'pseudo' => 'updated pseudo',
]]);

$this->assertResponseIsSuccessful();
$this->assertJsonContains([
'@id' => "/api/users/99",
'pseudo' => 'updated pseudo',
]);
}

    /**
     * @throws TransportExceptionInterface
     */
    public function testDeleteUser(): void
{


    $client = static::createClient();

    $client->request('DELETE', "/api/users/98");

    $this->assertResponseStatusCodeSame(204);
    $this->assertNull(
    // Through the container, you can access all your services from the tests, including the ORM, the mailer, remote API clients...
        static::$container->get('doctrine')->getRepository(User::class)->findOneBy(['email' => 'simonotantoine1@gmail.com'])
    );
}



public function hashPassword(User $user): string
{
    return $this->passwordHasher->hashPassword($user, $user->getPassword());
}
}